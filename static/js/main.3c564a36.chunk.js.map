{"version":3,"sources":["Components/Todo/todo.js","Components/Todoform/todo-form.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","backgroundColor","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTodos","newTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLA6BeA,MA3Bf,YAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,yBAAKC,UAAU,mBACb,yBACEA,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,KAE5DP,EAAKQ,KACN,6BACE,4BACEH,MAAO,CACLI,gBAAiBT,EAAKO,YAAc,UAAY,WAElDH,UAAU,8BACVM,QAAS,kBAAMR,EAAaD,KAL9B,YASA,4BAAQG,UAAU,iBAAiBM,QAAS,kBAAMP,EAAWF,KAA7D,SCYKU,MA9Bf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAU7B,OACE,0BAAMX,UAAU,cAAcY,SARX,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKP,yBAAKX,UAAU,cACb,2BACEe,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,WAGrC,4BACEV,UAAU,0BACVgB,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,SAFnC,c,MC0BSQ,MA3Cf,WAAgB,IAAD,EACaT,mBAAS,IADtB,mBACNU,EADM,KACCC,EADD,KAQPtB,EAAe,SAAAD,GACnB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASxB,GAAOM,aAAekB,EAASxB,GAAOM,YAC/CiB,EAASC,IAGLtB,EAAa,SAAAF,GACjB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASC,OAAOzB,EAAO,GACvBuB,EAASC,IAGX,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,yCACb,yBAAKA,UAAU,UACb,0CAEF,yBAAKA,UAAU,aACZmB,EAAMI,KAAI,SAAC3B,EAAMC,GAAP,OACT,kBAAC,EAAD,CACE2B,IAAK3B,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,OAGhB,kBAAC,EAAD,CAAUS,QAjCF,SAAAJ,GACd,IAAMiB,EAAQ,sBAAOF,GAAP,CAAc,CAAEf,UAC9BgB,EAASC,UCEOI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3c564a36.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div className=\"container-fluid\">\n      <div\n        className=\"todo\"\n        style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n      >\n        {todo.text}\n        <div>\n          <button\n            style={{\n              backgroundColor: todo.isCompleted ? \"#ABA5A3\" : \"#dc3545\"\n            }}\n            className=\"complete-btn btn btn-danger\"\n            onClick={() => completeTodo(index)}\n          >\n            Complete\n          </button>\n          <button className=\"btn btn-danger\" onClick={() => removeTodo(index)}>\n            x\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form className=\"form-inline\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"input\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n      <button\n        className=\"add-btn btn btn-success\"\n        onChange={e => setValue(e.target.value)}\n      >\n        Add Todo\n      </button>\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport Todo from \"./Components/Todo/todo\";\nimport TodoForm from \"./Components/Todoform/todo-form\";\nimport \"./App.css\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"d-flex flex-column align-items-center\">\n        <div className=\"header\">\n          <h1>Todo List</h1>\n        </div>\n        <div className=\"todo-list\">\n          {todos.map((todo, index) => (\n            <Todo\n              key={index}\n              index={index}\n              todo={todo}\n              completeTodo={completeTodo}\n              removeTodo={removeTodo}\n            />\n          ))}\n          <TodoForm addTodo={addTodo} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}